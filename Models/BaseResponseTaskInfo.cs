using Newtonsoft.Json;
using System.Collections.Generic;
using DataForSeo.Client.Models;

namespace DataForSeo.Client.Models
{

    public class BaseResponseTaskInfo 
    {

        /// <summary>
        /// task identifier
        /// <br/>unique task identifier in our system in the UUID format
        /// </summary>
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// status code of the task
        /// <br/>generated by DataForSEO, can be within the following range: 10000-60000
        /// <br/>you can find the full list of the response codes here
        /// </summary>
        [JsonProperty("status_code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// informational message of the task
        /// <br/>you can find the full list of general informational messages here
        /// </summary>
        [JsonProperty("status_message", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// execution time, seconds
        /// </summary>
        [JsonProperty("time", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }

        /// <summary>
        /// total tasks cost, USD
        /// </summary>
        [JsonProperty("cost", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Cost { get; set; }

        /// <summary>
        /// number of elements in the result array
        /// </summary>
        [JsonProperty("result_count", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long? ResultCount { get; set; }

        /// <summary>
        /// URL path
        /// </summary>
        [JsonProperty("path", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IEnumerable<string> Path { get; set; }

        /// <summary>
        /// contains the same parameters that you specified in the POST request
        /// </summary>
        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, object> Data { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }
    }
}